{p, code_eq} = require './helper'

describe 'for', ->
	it 'simple', ->
		code_eq """
			for i in [1..3]
				x!
			null
		""", """
			var i, _i,
			  _this = this;

			i = _i = 1;
			function _step() {
			  i = ++_i;
			  _body();
			};
			function _body() {
			  if (_i <= 3) {
				x(function(_$$_1) {
				  _step(_$$_1);
				});
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""

	it 'returns', ->
		code_eq """
			xs = for i in [1..3]
				x!
			null
		""", """
			var i, xs, _$res$_1, _i,
			  _this = this;

			_$res$_1 = [];
			i = _i = 1;
			function _step() {
			  i = ++_i;
			  _body();
			};
			function _body() {
			  if (_i <= 3) {
				x(function(_$$_2) {
				  _step(_$res$_1.push(_$$_2));
				});
			  } else {
				_done();
			  }
			};
			function _done() {
			  _$cb$_0(_$res$_1);
			};
			_body();
			function _$cb$_0() {
			  xs = arguments[0];
			  return null;
			};
		"""

	it 'guard', ->
		code_eq """
			for i in [1..3] when i > 10
				x!
			null
		""", """
			var i, _i,
			  _this = this;

			i = _i = 1;
			function _step() {
			  i = ++_i;
			  _body();
			};
			function _body() {
			  if (_i <= 3) {
				if (i > 10) {
				  x(function(_$$_1) {
					_step(_$$_1);
				  });
				} else {
				  _step();
				}
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""
	it 'pluckdirectcall', ->
		code_eq """
			for i in [1..10]
				c = b!
			null
		""", """
			var c, i, _i,
			  _this = this;

			i = _i = 1;
			function _step() {
			  i = ++_i;
			  _body();
			};
			function _body() {
			  if (_i <= 10) {
				b(function() {
				  _step(c = arguments[0]);
				});
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""

	it 'end with async condition', ->
		code_eq """
			res = for x in a
				if y = b
					z = c!
		""", """
			var res, x, y, z, _$res$_1, _i, _len,
			  _this = this;

			_$res$_1 = [];
			_i = 0, _len = a.length;
			function _step() {
			  _i++;
			  _body();
			};
			function _body() {
			  if (_i < _len) {
				x = a[_i];
				if (y = b) {
				  c(function() {
					_$cb$_3(z = arguments[0]);
				  });
				  function _$cb$_3(_$$_2) {
					_step(_$res$_1.push(_$$_2));
				  };
				} else {
				  _step(_$res$_1.push(void 0));
				}
			  } else {
				_done();
			  }
			};
			function _done() {
			  _$cb$_0(_$res$_1);
			};
			_body();
			function _$cb$_0() {
			  return res = arguments[0];
			};
		"""

	it 'nested for', ->
		code_eq """
			for x in a
				for y in b
					c!
			null
		""", """
			var x, y, _i, _len,
			  _this = this;

			_i = 0, _len = a.length;
			function _step() {
			  _i++;
			  _body();
			};
			function _body() {
			  var _j, _len1;
			  if (_i < _len) {
				x = a[_i];
				_j = 0, _len1 = b.length;
				function _step1() {
				  _j++;
				  _body1();
				};
				function _body1() {
				  if (_j < _len1) {
					y = b[_j];
					c(function(_$$_3) {
					  _step1(_$$_3);
					});
				  } else {
					_$cb$_0();
				  }
				};
				_body1();
				function _$cb$_0(_$$_2) {
				  _step(_$$_2);
				};
			  } else {
				_$cb$_1();
			  }
			};
			_body();
			function _$cb$_1() {
			  return null;
			};
		"""

	it 'contain defPart', ->
		code_eq """
			for x in a.b
				c!
			null
		""", """
			var x, _i, _len, _ref,
			  _this = this;

			  _ref = a.b;
			_i = 0, _len = _ref.length;
			function _step() {
			  _i++;
			  _body();
			};
			function _body() {
			  if (_i < _len) {
				x = _ref[_i];
				c(function(_$$_1) {
				  _step(_$$_1);
				});
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""

	it 'for own width defPart', ->
		code_eq """
			for own k, v of a.b
				c!
			null
		""", """
			var k, v, _$$_0, _$$_1, _$$_2, _i, _len,
			  __hasProp = {}.hasOwnProperty,
			  _this = this;

			_$$_1 = a.b;

			_$$_2 = (function() {
			  var _results;
			  _results = [];
			  for (_$$_0 in _$$_1) {
				if (!__hasProp.call(_$$_1, _$$_0)) continue;
				_results.push(_$$_0);
			  }
			  return _results;
			})();

			_i = 0, _len = _$$_2.length;
			function _step() {
			  _i++;
			  _body();
			};
			function _body() {
			  if (_i < _len) {
				k = _$$_2[_i];
				v = _$$_1[k];
				c(function(_$$_4) {
				  _step(_$$_4);
				});
			  } else {
				_$cb$_3();
			  }
			};
			_body();
			function _$cb$_3() {
			  return null;
			};
		"""

describe 'while', ->
	it 'simple', ->
		code_eq """
			while true
				x!
			null
		""", """
			var _this = this;

			function _body() {
			  if (true) {
				x(function(_$$_1) {
				  _body(_$$_1);
				});
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""

	it 'returns', ->
		code_eq """
			xs = while true
				x!
			null
		""", """
			var xs, _$res$_1,
			  _this = this;

			_$res$_1 = [];
			function _body() {
			  if (true) {
				x(function(_$$_2) {
				  _body(_$res$_1.push(_$$_2));
				});
			  } else {
				_done();
			  }
			};
			function _done() {
			  _$cb$_0(_$res$_1);
			};
			_body();
			function _$cb$_0() {
			  xs = arguments[0];
			  return null;
			};
		"""

	it 'for own of', ->
		code_eq """
			for own k, v of vs
				x!
			null
		""", """
			var k, v, _$$_0, _$$_1, _i, _len,
			  __hasProp = {}.hasOwnProperty,
			  _this = this;

			_$$_1 = (function() {
			  var _results;
			  _results = [];
			  for (_$$_0 in vs) {
				if (!__hasProp.call(vs, _$$_0)) continue;
				_results.push(_$$_0);
			  }
			  return _results;
			})();

			_i = 0, _len = _$$_1.length;
			function _step() {
			  _i++;
			  _body();
			};
			function _body() {
			  if (_i < _len) {
				k = _$$_1[_i];
				v = vs[k];
				x(function(_$$_3) {
				  _step(_$$_3);
				});
			  } else {
				_$cb$_2();
			  }
			};
			_body();
			function _$cb$_2() {
			  return null;
			};
		"""

	it 'nested for with break', ->
		code_eq """
			while true
				a!
				for i in a
					if i < 10
						continue
					else
						break
				b!
			null
		""", """
			var i,
			  _this = this;

			function _body() {
			  if (true) {
				a(function() {
				  var _i, _len;
				  for (_i = 0, _len = a.length; _i < _len; _i++) {
					i = a[_i];
					if (i < 10) {
					  continue;
					} else {
					  break;
					}
				  }
				  b(function(_$$_1) {
					_body(_$$_1);
				  });
				});
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""
	it '_break', ->
		code_eq  """
			while true
				a!
				->
					b _break
			null
		""", """
			var _this = this;

			function _body() {
			  if (true) {
				a(function() {
				  _body(function() {
					return b(_$cb$_0);
				  });
				});
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""

	it '_continue', ->
		code_eq  """
			while true
				a!
				->
					b _continue
			null
		""", """
			var _this = this;

			function _body() {
			  if (true) {
				a(function() {
				  _body(function() {
					return b(_body);
				  });
				});
			  } else {
				_$cb$_0();
			  }
			};
			_body();
			function _$cb$_0() {
			  return null;
			};
		"""

	it 'loop with autocb args', ->
		code_eq """
			(autocb(a, b)) ->
				a = for v in vs
						x!
		""", """
          (function(autocb) {
            var a, b, v, _$res$_1, _i, _len,
              _this = this;
            _$res$_1 = [];
            _i = 0, _len = vs.length;
            function _step() {
              _i++;
              _body();
            };
            function _body() {
              if (_i < _len) {
                v = vs[_i];
                x(function(_$$_2) {
                  _step(_$res$_1.push(_$$_2));
                });
              } else {
                _done();
              }
            };
            function _done() {
              _$cb$_0(_$res$_1);
            };
            _body();
            function _$cb$_0() {
              a = arguments[0];
              autocb(a, b);
            };
          });
		"""
